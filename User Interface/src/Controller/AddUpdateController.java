package Controller;

import javafx.fxml.FXML;

import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

import application.Model;
import javafx.event.ActionEvent;

public class AddUpdateController {
	@FXML
	private TextField id;
	@FXML
	private TextField name;
	@FXML
	private TextField day;
	@FXML
	private TextField month;
	@FXML
	private TextField year;
	@FXML
	private TextField phone;
	@FXML
	private TextField email;
	@FXML
	private TextField address;
	@FXML
	private TextField salary;
	@FXML
	private TextField job;
	@FXML
	private Button update;
	@FXML
	private Label alert;
	private String Id;
	private Model model = new Model();
	private Connection myConn = model.connect("sa", "bob1234");
	public void setScene(String operation) throws SQLException {
		id.setDisable(true);
		if(operation.equals("Update")) {
			ResultSet q = model.getData(myConn, "*", "EMPLOYEE", "EMPLOYEE_ID ='"+Id+"'");
			if(q.next()) {
					
				id.setText(q.getString("EMPLOYEE_ID").trim());
				name.setText(q.getString("EMPLOYEE_NAME").trim());
				String[] birth = q.getString("BIRTHDAY").trim().split(" ");
				day.setText(birth[0].split("-")[2]);
				month.setText(birth[0].split("-")[1]);
				year.setText(birth[0].split("-")[0]);
				phone.setText(q.getString("PHONE_NUMBER").trim());
				email.setText(q.getString("EMAIL").trim());
				address.setText(q.getString("ADDRESS").trim());
				job.setText(q.getString("JOB_TITLE").trim());
				salary.setText(q.getString("SALARY").trim());
				job.setDisable(true);
			}
			
		}else {
			update.setText("ADD");
		}
		
	}
	// Event Listener on Button[#update].onAction
	@FXML
	public void update(ActionEvent event) throws SQLException {
		// TODO Autogenerated
		if(name.getText().trim().isEmpty() || day.getText().trim().isEmpty() || month.getText().trim().isEmpty() || year.getText().trim().isEmpty() || job.getText().trim().isEmpty() || salary.getText().trim().isEmpty() || address.getText().trim().isEmpty() || email.getText().trim().isEmpty() || phone.getText().trim().isEmpty()) {
			alert.setText("Fill empty fields");
			return;
		}else if(Integer.parseInt(day.getText())>31 || Integer.parseInt(day.getText())<=0) {
			alert.setText("Non valid day");
			return;
		}else if(Integer.parseInt(month.getText())>12 || Integer.parseInt(month.getText())<=0) {
			alert.setText("Non valid month");
			return;
		}else if(!job.getText().equalsIgnoreCase("pilot") && !job.getText().equalsIgnoreCase("Airport assistant")) {
			alert.setText("Non valid job");
			return;
		}
		
		if(update.getText().equals("Update")) {
			model.update(myConn,"EMPLOYEE","EMPLOYEE_NAME='"+name.getText().trim()+"',JOB_TITLE = '"+job.getText().trim()+"',SALARY ="+Float.parseFloat(salary.getText().trim())+",BIRTHDAY ='"+year.getText().trim()+"-"+month.getText().trim()+"-"+day.getText().trim()+"',EMAIL='"+email.getText().trim()+"',ADDRESS='"+address.getText().trim()+"',PHONE_NUMBER='"+phone.getText().trim()+"'", "EMPLOYEE_ID = '"+Id+"'");
			alert.setText("Updated successfully");
		}else if(update.getText().equals("ADD")) {
			ResultSet q = model.getData(myConn, "MAX(EMPLOYEE_ID)", "EMPLOYEE", "");//to increment the max id and assighn it to the new employees id
			int result = 1;
			if(q.next()) {
				result = q.getInt(1)+1;
			}
			try {
				model.Insert(myConn,"EMPLOYEE","'"+result+"','"+name.getText().trim()+"','"+job.getText().trim()+"',"+Float.parseFloat(salary.getText().trim())+","+year.getText().trim()+"-"+month.getText().trim()+"-"+day.getText().trim()+",'"+email.getText().trim()+"','"+address.getText().trim()+"','"+phone.getText().trim()+"'");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				alert.setText("An error occured while adding");
				e.printStackTrace();
			} 
			alert.setText("Added successfully");
		}
		
	}
	public void setId(String id) {
		this.Id = id;
	}
}
